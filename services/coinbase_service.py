import aiohttp
import asyncio
import ssl
import certifi
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, '..'))
sys.path.insert(0, project_root)

from models.database import db

logger = logging.getLogger(__name__)


class CoinbaseService:
    def __init__(self):
        self.base_url = "https://api.coinbase.com/v2"
        self.timeout = aiohttp.ClientTimeout(total=10)

    def create_ssl_context(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            ssl_context = ssl.create_default_context(cafile=certifi.where())
            return ssl_context
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            return ssl_context

    async def fetch_url(self, session, url, params=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            async with session.get(url, params=params, timeout=self.timeout) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.warning(f"‚ùå HTTP {response.status} –¥–ª—è {url}")
                    return None
        except asyncio.TimeoutError:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è {url}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
            return None

    async def search_currencies(self, query):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ Coinbase API"""
        ssl_context = self.create_ssl_context()
        connector = aiohttp.TCPConnector(ssl=ssl_context)

        async with aiohttp.ClientSession(connector=connector) as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                url = f"{self.base_url}/currencies/crypto"
                data = await self.fetch_url(session, url)

                if not data:
                    return []

                currencies = data.get('data', [])

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
                filtered = [
                    currency for currency in currencies
                    if query.lower() in currency.get('name', '').lower() or
                       query.lower() in currency.get('symbol', '').lower()
                ]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                for currency in filtered[:20]:
                    db.add_cryptocurrency(
                        currency.get('code', ''),
                        currency.get('symbol', ''),
                        currency.get('name', '')
                    )

                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(filtered)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
                return filtered[:10]

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Coinbase: {e}")
                return []

    async def get_currency_price(self, currency_id):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        ssl_context = self.create_ssl_context()
        connector = aiohttp.TCPConnector(ssl=ssl_context)

        async with aiohttp.ClientSession(connector=connector) as session:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
                pairs = [f"{currency_id}-USD", f"{currency_id}-USDT", f"{currency_id}-EUR"]

                for pair in pairs:
                    url = f"{self.base_url}/prices/{pair}/spot"
                    data = await self.fetch_url(session, url)

                    if data and 'data' in data:
                        price_data = data['data']
                        return {
                            'price': float(price_data['amount']),
                            'currency': price_data['currency'],
                            'base': price_data['base'],
                            'pair': pair
                        }

                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {currency_id}")
                return None

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {currency_id}: {e}")
                return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
coinbase_service = CoinbaseService()