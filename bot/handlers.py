from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
import asyncio

from services.crypto_service import BybitService
from models.lstm_model import LSTMPredictor


class TelegramBotHandlers:
    def __init__(self):
        self.bybit_service = BybitService()
        self.predictor = LSTMPredictor()

    def get_main_menu(self):
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="search")],
            [InlineKeyboardButton("üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã", callback_data="predict")],
            [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PulseTrade Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üîç –ù–∞–π—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ üìà –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω —Å –ø–æ–º–æ—â—å—é AI (LSTM)
‚Ä¢ üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        await update.message.reply_text(welcome_text, reply_markup=self.get_main_menu())

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        data = query.data

        if data == "search":
            await self.show_search(update, context)
        elif data == "predict":
            await self.show_prediction(update, context)
        elif data == "portfolio":
            await self.show_portfolio(update, context)
        elif data.startswith("symbol_"):
            symbol = data.replace("symbol_", "")
            await self.show_symbol_info(update, context, symbol)

    async def show_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, ADA):"
        )

    async def show_prediction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):"
        )

    async def show_symbol_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, symbol: str):
        query = update.callback_query

        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            ticker = loop.run_until_complete(self.bybit_service.get_ticker(symbol))
            loop.close()

            text = f"""
üíé {ticker['symbol']}
üíµ –¶–µ–Ω–∞: ${ticker['last_price']:.2f}
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {ticker['price_change_percent_24h']:+.2f}%
üìà –û–±—ä–µ–º: {ticker['volume_24h']:,.0f}

–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã?
            """

            keyboard = [
                [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data=f"predict_{symbol}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search")]
            ]

            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.upper()

        if any(cmd in text.lower() for cmd in ['btc', 'eth', 'ada', 'dot', 'link']):
            # –ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                symbols = loop.run_until_complete(self.bybit_service.search_symbols(text))
                loop.close()

                if symbols:
                    keyboard = []
                    for symbol in symbols[:5]:
                        keyboard.append([InlineKeyboardButton(
                            f"{symbol['symbol']} ({symbol['base_coin']})",
                            callback_data=f"symbol_{symbol['symbol']}"
                        )])

                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search")])

                    await update.message.reply_text(
                        "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await update.message.reply_text("‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

        elif 'USDT' in text or len(text) <= 6:
            # –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã
            try:
                await update.message.reply_text("üîÑ –°—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑...")

                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑
                historical_data = loop.run_until_complete(self.bybit_service.get_klines(text))
                prediction = loop.run_until_complete(
                    self.predictor.get_price_prediction(text, historical_data)
                )
                loop.close()

                prediction_text = f"""
üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è *{prediction['symbol']}*

üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `${prediction['current_price']:.2f}`
üìä –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {prediction['average_change_percent']:+.2f}%
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: *{prediction['recommendation']}*
ü§ù –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.1f}%

–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π:
"""
                for pred in prediction['predictions']:
                    trend = "üìà" if pred['change_percent'] > 0 else "üìâ"
                    prediction_text += f"–î–µ–Ω—å {pred['day']}: `${pred['predicted_price']:.2f}` ({pred['change_percent']:+.2f}%) {trend}\n"

                await update.message.reply_text(prediction_text, parse_mode='Markdown')

            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")

    async def show_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query

        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            balance = loop.run_until_complete(self.bybit_service.get_wallet_balance())
            loop.close()

            total_equity = float(balance['result']['list'][0]['totalEquity'])

            portfolio_text = f"""
üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:

üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_equity:.2f}

–î–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ API.
            """

            await query.edit_message_text(portfolio_text, reply_markup=self.get_main_menu())

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def setup_handlers(application):
    handlers = TelegramBotHandlers()

    application.add_handler(CallbackQueryHandler(handlers.handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_text_message))