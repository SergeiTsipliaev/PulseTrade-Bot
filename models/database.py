import psycopg2
from psycopg2.extras import RealDictCursor
import os
import logging
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, '..'))
sys.path.insert(0, project_root)

logger = logging.getLogger(__name__)


class Database:
    def __init__(self):
        self.conn = None
        self.connect()

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.conn = psycopg2.connect(
                host=os.getenv('DB_HOST', 'localhost'),
                database=os.getenv('DB_NAME', 'cryptobot'),
                user=os.getenv('DB_USER', 'postgres'),
                password=os.getenv('DB_PASSWORD', 'password'),
                port=os.getenv('DB_PORT', '5432'),
                connect_timeout=5
            )
            self.create_tables()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            logger.info("üîÑ –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            self.conn = None
            return False

    def is_connected(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        return self.conn is not None

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)"""
        if not self.conn:
            return

        try:
            with self.conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                cur.execute("""
                            CREATE TABLE IF NOT EXISTS cryptocurrencies
                            (
                                id
                                SERIAL
                                PRIMARY
                                KEY,
                                coinbase_id
                                VARCHAR
                            (
                                50
                            ) UNIQUE NOT NULL,
                                symbol VARCHAR
                            (
                                20
                            ) NOT NULL,
                                name VARCHAR
                            (
                                100
                            ) NOT NULL,
                                is_active BOOLEAN DEFAULT TRUE,
                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                                )
                            """)

                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                cur.execute("""
                            CREATE INDEX IF NOT EXISTS idx_crypto_symbol
                                ON cryptocurrencies(symbol)
                            """)
                cur.execute("""
                            CREATE INDEX IF NOT EXISTS idx_crypto_name
                                ON cryptocurrencies(name)
                            """)

                self.conn.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            if self.conn:
                self.conn.rollback()

    def search_cryptocurrencies(self, query):
        """–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –ë–î"""
        if not self.is_connected():
            logger.debug("üîç –ü–æ–∏—Å–∫: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []

        try:
            with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("""
                            SELECT coinbase_id, symbol, name
                            FROM cryptocurrencies
                            WHERE (LOWER(symbol) LIKE LOWER(%s) OR LOWER(name) LIKE LOWER(%s))
                              AND is_active = TRUE
                            ORDER BY CASE
                                         WHEN LOWER(symbol) = LOWER(%s) THEN 1
                                         WHEN LOWER(name) = LOWER(%s) THEN 2
                                         ELSE 3
                                         END,
                                     symbol LIMIT 20
                            """, (f'{query}%', f'%{query}%', query, query))

                results = cur.fetchall()
                logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
                return results
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î: {e}")
            return []

    def add_cryptocurrency(self, coinbase_id, symbol, name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –ë–î"""
        if not self.is_connected():
            logger.debug(f"üíæ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {symbol} - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        try:
            with self.conn.cursor() as cur:
                cur.execute("""
                            INSERT INTO cryptocurrencies (coinbase_id, symbol, name)
                            VALUES (%s, %s, %s) ON CONFLICT (coinbase_id) 
                    DO
                            UPDATE SET
                                symbol = EXCLUDED.symbol,
                                name = EXCLUDED.name,
                                updated_at = CURRENT_TIMESTAMP
                            """, (coinbase_id, symbol, name))
                self.conn.commit()
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {symbol} - {name}")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {e}")
            if self.conn:
                self.conn.rollback()
            return False

    def get_all_cryptocurrencies(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        if not self.is_connected():
            logger.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return []

        try:
            with self.conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("""
                            SELECT coinbase_id, symbol, name
                            FROM cryptocurrencies
                            WHERE is_active = TRUE
                            ORDER BY symbol
                            """)
                results = cur.fetchall()
                logger.debug(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î: {len(results)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                return results
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
db = Database()