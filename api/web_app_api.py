from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import os
import sys
import asyncio
import numpy as np
import time
from datetime import datetime, timedelta
from services.coinbase_service import coinbase_service
from models.database import db

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

app = Flask(__name__, static_folder='../static')
CORS(app)

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
cache = {}
CACHE_TTL = 60


@app.route('/')
def index():
    return send_from_directory(app.static_folder, 'index.html')


@app.route('/app.js')
def app_js():
    return send_from_directory(app.static_folder, 'app.js')


@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'ok',
        'api': 'Coinbase + PostgreSQL',
        'features': ['–ø–æ–∏—Å–∫', '–ø—Ä–æ–≥–Ω–æ–∑—ã', '–≤—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã']
    })


# üîç –ü–û–ò–°–ö –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢
@app.route('/api/search', methods=['GET'])
def search_cryptocurrencies():
    query = request.args.get('q', '').strip()

    if not query or len(query) < 1:
        return jsonify({'success': True, 'data': []})

    print(f"üîç –ü–æ–∏—Å–∫: '{query}'")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ë–î
        db_results = db.search_cryptocurrencies(query)

        if db_results:
            results = [
                {
                    'id': row['coinbase_id'],
                    'symbol': row['symbol'],
                    'name': row['name']
                }
                for row in db_results
            ]
            return jsonify({'success': True, 'data': results, 'source': 'database'})

        # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç, –∏—â–µ–º —á–µ—Ä–µ–∑ Coinbase API
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            api_results = loop.run_until_complete(
                coinbase_service.search_currencies(query)
            )
        finally:
            loop.close()

        results = [
            {
                'id': currency['code'],
                'symbol': currency['symbol'],
                'name': currency['name']
            }
            for currency in api_results
        ]

        return jsonify({'success': True, 'data': results, 'source': 'coinbase'})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# üìä –í–°–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´
@app.route('/api/cryptos/all', methods=['GET'])
def get_all_cryptocurrencies():
    try:
        cryptocurrencies = db.get_all_cryptocurrencies()

        results = [
            {
                'id': row['coinbase_id'],
                'symbol': row['symbol'],
                'name': row['name']
            }
            for row in cryptocurrencies
        ]

        return jsonify({
            'success': True,
            'data': results,
            'total': len(results)
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# üí∞ –î–ê–ù–ù–´–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´
@app.route('/api/crypto/<crypto_id>', methods=['GET'])
def get_crypto_data(crypto_id):
    print(f"\n{'=' * 60}")
    print(f"üìä GET /api/crypto/{crypto_id}")
    print(f"{'=' * 60}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if crypto_id in cache:
        cached_data, cached_time = cache[crypto_id]
        age = time.time() - cached_time
        if age < CACHE_TTL:
            print(f"üíæ –ö—ç—à ({int(age)}—Å)")
            return jsonify(cached_data)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            price_data = loop.run_until_complete(
                coinbase_service.get_currency_price(crypto_id)
            )
        finally:
            loop.close()

        if not price_data:
            return jsonify({
                'success': False,
                'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {crypto_id}'
            }), 500

        current_price = price_data['price']

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        prices = self.generate_sample_data(current_price)
        timestamps = self.generate_timestamps()

        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = self.calculate_indicators(prices)

        result = {
            'success': True,
            'data': {
                'id': crypto_id,
                'symbol': crypto_id,
                'name': crypto_id,
                'current': {
                    'price': current_price,
                    'currency': price_data['currency'],
                    'change_24h': 0,  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Coinbase
                    'volume_24h': 0
                },
                'history': {
                    'prices': prices,
                    'timestamps': timestamps
                },
                'indicators': indicators
            }
        }

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        cache[crypto_id] = (result, time.time())

        print(f"‚úÖ –£—Å–ø–µ—Ö: {crypto_id} - ${current_price:,.2f}")
        print(f"{'=' * 60}\n")

        return jsonify(result)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# üîÆ –ü–†–û–ì–ù–û–ó
@app.route('/api/predict/<crypto_id>', methods=['POST'])
def predict_price(crypto_id):
    print(f"\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {crypto_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            price_data = loop.run_until_complete(
                coinbase_service.get_currency_price(crypto_id)
            )
        finally:
            loop.close()

        if not price_data:
            return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'}), 500

        current_price = price_data['price']

        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ LSTM)
        predictions = self.simple_prediction(current_price)

        return jsonify({
            'success': True,
            'data': {
                'predictions': predictions,
                'current_price': current_price,
                'predicted_change': 2.5,
                'signal': 'HOLD',
                'signal_text': 'üü° –£–¥–µ—Ä–∂–∞–Ω–∏–µ',
                'days': 7
            }
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
def generate_sample_data(current_price):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
    prices = [current_price]
    for i in range(89):
        change = np.random.normal(0, 0.02)  # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ¬±2%
        new_price = prices[-1] * (1 + change)
        prices.append(new_price)
    return prices


def generate_timestamps():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
    now = datetime.now()
    return [(now - timedelta(days=89 - i)).timestamp() * 1000 for i in range(90)]


def calculate_indicators(prices):
    """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    prices_array = np.array(prices)

    # RSI
    deltas = np.diff(prices_array)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)

    avg_gain = np.mean(gains[-14:]) if len(gains) >= 14 else 0
    avg_loss = np.mean(losses[-14:]) if len(losses) >= 14 else 0
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    rsi = 100 - (100 / (1 + rs))

    return {
        'rsi': float(rsi),
        'ma_7': float(np.mean(prices_array[-7:])),
        'ma_25': float(np.mean(prices_array[-25:])),
        'volatility': float(np.std(np.diff(prices_array) / prices_array[:-1]) * 100)
    }


def simple_prediction(current_price):
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω"""
    return [current_price * (1 + 0.01 * i) for i in range(1, 8)]


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"\n{'=' * 60}")
    print(f"üöÄ Crypto Tracker —Å –ø–æ–∏—Å–∫–æ–º")
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL")
    print(f"üîç –ü–æ–∏—Å–∫: Coinbase API + –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")
    print(f"{'=' * 60}")
    app.run(host='0.0.0.0', port=port, debug=False)